import org.springframework.boot.gradle.run.BootRunTask

// ****************************************************************************
// Build Dependencies
// ****************************************************************************
buildscript {
    ext {
        springBootVersion = '1.4.2.RELEASE'
    }
    repositories {
        // Public Maven Repository (default). Remove this if your environment doesn't allow direct repo access
        mavenCentral()

        // Corporate or local Maven Repository. Update variables in gradle.properties
        maven {
            url mavenRepoPublicUrl
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:0.6.1.RELEASE")
    }
}

// ****************************************************************************
// Project Plugins
// ****************************************************************************
plugins {
    id 'net.saliman.cobertura' version '2.4.0'
    id "com.moowork.node" version "1.1.0"
}

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'codenarc'

// Disable Spring Boot plugin repackage feature, which makes the WAR/JAR file executable
bootRepackage {
    enabled = false
}

// ****************************************************************************
// Project Properties
// ****************************************************************************
group = projectGroup
version = projectVersion
sourceCompatibility = 1.8
targetCompatibility = 1.8

// ****************************************************************************
// Project Maven Repositories (for download)
// ****************************************************************************
repositories {
    // Public Maven Repository (default). Remove this if your environment doesn't allow direct repo access
    mavenCentral()

    // Corporate or local Maven Repository. Update variables in gradle.properties
    maven {
        url mavenRepoPublicUrl
    }
}

// ****************************************************************************
// Project Maven Repositories (for upload)
// ****************************************************************************
// Upload artifacts from this project to a Maven repository, typically a Corporate or local repository.
// - Update variables in gradle.properties.
// - Execute the upload by invoking the gradle command `gradle upload`
// - SNAPSHOT: Versions with "-SNAPSHOT" appended (ie 1.0.0-SNAPSHOT) will be deployed to the maveRepoSnapshotUrl
// - RELEASE: Versions with the "-RELEASE" appended (ie 1.0.0-RELEASE) will be deployed to the mavenRepoReleaseUrl
uploadArchives {
    repositories {
        //noinspection GroovyAssignabilityCheck
        mavenDeployer {
            repository(url: mavenRepoReleaseUrl) {
                authentication(userName: mavenRepoUsername, password: mavenRepoPassword)
            }
            snapshotRepository(url: mavenRepoSnapshotUrl) {
                authentication(userName: mavenRepoUsername, password: mavenRepoPassword)
            }
        }
    }
}

// ****************************************************************************
// Project Dependencies
// ****************************************************************************
dependencies {

    // Voyage API
    compile group: 'io.voyageplatform',                 name: 'voyage-api-core',                version: '1.0.0-RELEASE'

    // Spring
    compile group: 'org.springframework.boot',          name: 'spring-boot-starter-web',             version: "${springBootVersion}"
    compile group: 'org.springframework.boot',          name: 'spring-boot-starter-data-jpa',        version: "${springBootVersion}"
    compile group: 'org.springframework.boot',          name: 'spring-boot-starter-security',        version: "${springBootVersion}"
    compile group: 'org.springframework.boot',          name: 'spring-boot-starter-mail',            version: "${springBootVersion}"
    compile group: 'org.springframework.boot',          name: 'spring-boot-starter-freemarker',      version: "${springBootVersion}"
    compile group: 'org.springframework.security',      name: 'spring-security-jwt',                 version: '1.0.7.RELEASE'
    compile(group: 'org.springframework.security.oauth', name: 'spring-security-oauth2',             version: '2.0.12.RELEASE') {
        exclude(module: 'jackson-mapper-asl') // We already have a more recent jackson via Spring Boot
    }

    // Groovy
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version:'2.4.7'

    // Database
    compile group: 'org.liquibase',     name:'liquibase-core'
    compile group: 'com.h2database',    name: 'h2',                     version: '1.4.192'
    compile group: 'mysql',             name: 'mysql-connector-java',   version: '5.1.40'
    compile group: 'org.hibernate',     name: 'hibernate-envers',       version: '5.0.11.Final'

    // Login Web Form
    compile group: 'org.apache.tomcat.embed',  name: 'tomcat-embed-jasper'
    compile group: 'javax.servlet',            name: 'jstl'

    // Webjars (for css/js libs)
    compile group: 'org.webjars',   name: 'webjars-locator',    version: '0.30'
    compile group: 'org.webjars',   name: 'bootstrap',          version: '3.3.7'

    // Amazon Web Service (AWS)
    compile group: 'org.springframework.cloud',         name: 'spring-cloud-aws-autoconfigure',      version: '1.1.3.RELEASE'
    compile group: 'org.springframework.cloud',         name: 'spring-cloud-aws-messaging',          version: '1.1.3.RELEASE'

    // Other
    compile group: 'org.apache.commons',            name: 'commons-lang3',  version: '3.5'
    compile group: 'commons-codec',                 name: 'commons-codec',  version: '1.10'
    compile group: 'org.owasp.esapi',               name: 'esapi',          version: '2.1.0.1'
    compile group: 'com.googlecode.libphonenumber', name: 'libphonenumber', version: '8.4.0'

    // Testing
    testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version:"${springBootVersion}") {
        exclude(module: 'commons-logging')
    }
    testCompile group: 'org.spockframework', name: 'spock-core', version:'1.1-groovy-2.4-rc-3'
    testCompile group: 'org.spockframework', name: 'spock-spring', version:'1.1-groovy-2.4-rc-3'
    testCompile group: 'cglib', name: 'cglib-nodep', version:'3.2.4'
    testCompile group: 'org.apache.httpcomponents', name: 'httpclient'
    testCompile group: 'com.icegreen', name: 'greenmail', version: '1.5.2'
}

// ****************************************************************************
// Test scope settings
// ****************************************************************************
test {
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
    filter {
        includeTestsMatching '*Spec'
    }
}

// ****************************************************************************
// Codenarc Static Code Analysis plugin
// ****************************************************************************
codenarc {
    toolVersion = '0.26.0'

    codenarcMain {
        ignoreFailures false
        configFile file('codenarc/codenarc-main.rules')
        reports {
            xml.enabled = true
            html.enabled = true
        }

        maxPriority1Violations 0
        maxPriority2Violations 0
        maxPriority3Violations 0
    }
    codenarcTest {
        ignoreFailures false
        configFile file('codenarc/codenarc-test.rules')
        reports {
            xml.enabled = true
            html.enabled = true
        }

        maxPriority1Violations 0
        maxPriority2Violations 0
        maxPriority3Violations 0
    }
}

// ****************************************************************************
// Cobertura Test Coverage Plugin Config
// ****************************************************************************
cobertura {
    coverageFormats = ['html', 'xml']
    coverageIgnoreTrivial = true
    coverageIgnores = ['org.slf4j.Logger.*']
    coverageReportDir = new File("$buildDir/reports/cobertura")
}
test.finalizedBy(project.tasks.cobertura)

// ****************************************************************************
// Gradle Wrapper Config
// ****************************************************************************
task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}

// ****************************************************************************
// apiDoc Tasks
// ****************************************************************************
node {
    version = '6.8.0'
    download = true
}
task apidocInstall(type:NpmTask) {
    workingDir = file ('./apidoc')
    npmCommand = ['install']
}

task apidoc(type:NpmTask, dependsOn:'apidocInstall') {
    workingDir = file('./apidoc')
    npmCommand = ['run']
    args = ['apidoc']
}
processResources.dependsOn.add(apidoc)

// ****************************************************************************
// Pass environment variables to Spring BootRun task when running from Gradle
// ****************************************************************************
tasks.withType(BootRunTask) {
    bootRun.systemProperties = System.properties as Map<String, ?>
}